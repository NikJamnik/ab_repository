import numpy as np
import scipy.stats as st
from math import sqrt


def z_value(alpha: float, two_tailed: bool = True) -> float:
    """
    Возвращает квантиль стандартного нормального распределения Z
    для заданного уровня значимости alpha.

    Используется для расчёта критических значений в z-тестах и 
    при аппроксимации других статистических критериев нормальным распределением.

    Args:
        alpha (float): Уровень значимости (например, 0.05).
        two_tailed (bool, optional): 
            Если True — используется двусторонний тест (делит alpha пополам).
            Если False — односторонний тест. 
            По умолчанию True.

    Returns:
        float: Квантиль стандартного нормального распределения (Z-критическое значение).

    Пример:
        >>> z_value(0.05)
        1.959963984540054
    """
    if two_tailed:
        # Для двустороннего теста: alpha делится пополам
        return st.norm.ppf(1. - alpha / 2.)
    else:
        # Для одностороннего теста: используем полное alpha
        return st.norm.ppf(1. - alpha)


def t_value(alpha: float, df: int, two_tailed: bool = True) -> float:
    """
    Возвращает квантиль t-распределения Стьюдента для заданного уровня
    значимости и числа степеней свободы df.

    Используется для расчёта критических значений в t-тестах
    (включая Welch’s и одновыборочный t-тест).

    Args:
        alpha (float): Уровень значимости (например, 0.05).
        df (int): Число степеней свободы.
        two_tailed (bool, optional):
            Если True — двусторонний тест (делит alpha пополам).
            Если False — односторонний тест.
            По умолчанию True.

    Returns:
        float: Квантиль распределения Стьюдента (t-критическое значение).

    Пример:
        >>> t_value(0.05, 30)
        2.0422724563012373
    """
    if two_tailed:
        # Для двустороннего теста используем alpha/2 в каждом хвосте распределения
        return st.t.ppf(1. - alpha / 2., df)
    else:
        # Для одностороннего теста: один хвост, полное alpha
        return st.t.ppf(1. - alpha, df)

